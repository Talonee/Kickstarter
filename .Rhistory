casual_intro <- sub("Hello, my name is ", "Hey, I'm ", my_intro)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
library(stringr)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
?str_count
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
occurrences
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(val) {
num <- val * 2
num
}
haha <- double(456)
haha <- double(34)
2 ^ 3
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(val) {
num <- val ^ 3
num
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Create a vector `movies` that contains the names of six movies you like
movies <- c("inception", "interstellar", "wonder woman", "black panther", "doctor strange", "iron man")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
paste("sdhd", "dwhjh")
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
text <- paste("Hello, my name is ", name, ", and I'm ", age, " years old.")
text
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
text <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
text
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
excited
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste0(movies, " is a great movie!")
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!", sep = "")
excited
nums <- c(1, 2, 3, 4, 5, 6)
nums[-4]
nums <- c(10, 20, 30, 40, 50, 60)
nums[-4]
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-4]
without_four
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
typeof(len)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
nums <- c(10, 20, 30, 40, 50, 60)
nums2 <- c(1, 2, 3, 4)
nums3 <- sum(nums, nums2)
nums3
nums3 <- nums + nums2
nums3
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- lower_numbers + numbers
nums3 <- c(nums, nums2)
nums3
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
all_numbers
?as.Date()
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.time())
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.time())
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date(June 14, 2019)
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date(2019-06-14)
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date("2019-06-14")
typeof(summer_break)
typeof(Sys.Date())
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
days_to_break
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- upcoming_birthday - today
text <- paste("Hello, my name is ", name, ", and I'm ", age,
" years old.\n", "In ", num_days, " days I'll be", age + 1)
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
text <- paste("Hello, my name is ", name, ", and I'm ", age,
" years old.\n", "In ", num_days, " days I'll be", age + 1)
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
text <- paste("Hello, my name is ", name, ", and I'm ", age,
" years old.\n", "In ", num_days, " days I'll be",
age + 1, sep = "")
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
text
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
part1 <- paste("Hello, my name is ", name, ", and I'm ", age," years old.", sep = "")
part2 <- paste("In ", num_days, " days I'll be ", age + 1, sep = "")
text <- paste(part1, part2, sep = "\n")
text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
line1 <- paste("Hello, my name is ", name, ", and I'm ", age," years old.", sep = "")
line2 <- paste("In ", num_days, " days I'll be ", age + 1, sep = "")
total_text <- cat(part1, part2, sep = "\n")
total_text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13") string
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
line1 <- paste("Hello, my name is ", name, ", and I'm ", age," years old.", sep = "")
line2 <- paste("In ", num_days, " days I'll be ", age + 1, sep = "")
total_text <- cat(line1, line2, sep = "\n")
total_text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
?cat
text1 <- "boy loves "
text2 <- "a girl"
text1 <- "boy loves"
text2 <- "a girl"
paste(text1, text2)
paste(text1, text2, sep = "\n")
paste(text1, text2, sep = \n)
paste(text1, text2)
text1 <- "boy loves \n"
text2 <- "a girl"
paste(text1, text2)
?paste
paste(x, y, sep="%%", collapse=",")
paste(x, y, sep=",", collapse="%%")
x <- "boy loves \n"
y <- "a girl"
paste(x, y, sep="%%", collapse=",")
paste(x, y, sep=",", collapse="%%")
x <- "boy loves"
y <- "a girl"
paste(x, y, sep="%%", collapse=",")
paste(x, y, sep=",", collapse="%%")
paste(x, y, collapse=",")
x <- c("my", "name", "is")
y <- c("ruthvik", "Sai", "mondreti")
paste(x, y, collapse=",")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
line1 <- c("Hello, my name is ", name, ", and I'm ", age," years old.")
line2 <- paste("In ", num_days, " days I'll be ", age + 1, sep = "")
total_text <- paste(c(line1, line2), collapse = "\n")
total_text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
line1 <- paste("Hello, my name is ", name, ", and I'm ", age," years old.")
line2 <- paste("In ", num_days, " days I'll be ", age + 1, sep = "")
total_text <- paste(c(line1, line2), collapse = "\n")
total_text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
x <- paste("my", "name", "is")
y <- paste("ruthvik", "Sai", "mondreti")
paste(c(x, y), collapse=",")
paste(c(x, y), collapse="\n")
paste(c(x, y), collapse = "%%")
paste(c(x, y), collapse = "\n")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
line1 <- paste("Hello, my name is ", name, ", and I'm ", age," years old.", sep = "")
line2 <- paste("In ", num_days, " days I'll be ", age + 1, sep = "")
total_text <- paste(c(line1, line2), collapse = "\n")
total_text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
x <- c("a", "b", "c", "d")
y <- c("w", "x", "y", "z")
paste(x, y, sep="%%", collapse=",")
paste(x, y, sep=",", collapse="%%")
paste(x, y, collapse=",")
paste(x, y, sep =",")
x <- paste("a", "b", "c", "d")
y <- paste("w", "x", "y", "z")
paste(x, y, collapse=",")
paste(x, y, sep =",")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
text <- paste("Hello, my name is ", name, ", and I'm ", age," years old."
, " In ", num_days, " days I'll be ", age + 1, sep = "")
text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
vec <- c("INFO 201", "CSE 142")
gsub("[0-9]+", "", vec)
gsub(regex("0123456789"), "", vec)
library(stringr)
gsub(regex("0123456789"), "", vec)
gsub(regex("142"), "", vec)
gsub("142", "", vec)
gsub(regex("//d"), "", vec)
gsub(regex("\\d"), "", vec)
gsub(regex(":digit:"), "", vec)
gsub(regex("\\d"), "", vec)
gsub(regex("[0123456789]"), "", vec)
mtcars <- mtcars
View(mtcars)
View(mtcars)
arrange(mtcars, -disp, hp)
library("dplyr")
arrange(mtcars, -disp, hp)
hahaha <- arrange(mtcars, -gear, carb)
View(hahaha)
View(hahaha)
hahaha2 <- arrange(mtcars, -gear, -carb)
View(hahaha2)
View(hahaha)
View(hahaha)
hahaha3 <- arrange(mtcars, -gear)
View(hahaha3)
View(hahaha2)
select(mtcars, mean_gear = mean(gear))
summarize(mtcars, mean_gear = mean(gear))
select(mtcars, mean_gear = mean(gear))
?count
?count
?nrow
??count
?top_n
library(dplyr)
?top_n
?count
?top_n
as.Date("10/06/17")
as.Date("10/06/17", format = "%d/%m/%Y")
as.Date("10/06/17", format = "%d/%m/%y")
as.Date("10/06/17", format = "%D/%M/%y")
as.Date("10/06/17", format = "%d/%m/%y")
?as.Date
library(lubridate)
install.packages("lubridate")
library(lubridate)
?floor_date
as.Date("10/06/17", format = "%d/%m/%y")
as.Date("10/06/17", format = "%m/%d/%y")
library(ggplot2)
?ggplot
date <- as.Date("10/06/17", format = "%m/%d/%y")
?format
format(date, "%m")
format(date, "%y")
format(date, "%Y")
?separate
library(tidyr)
?separate
print("(")
source('~/.active-rstudio-document', echo=TRUE)
print("\\(")
gsub("(", "", helo)
helo <- "(kffjgg)"
gsub("(", "", helo)
gsub("\(", "", helo)
gsub("\\(", "", helo)
gsub("(", "", helo)
gsub("\\(", "", helo)
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
View(df)
library(dplyr)
df %>% separate(x, c("A", "B"))
library(dplyr)
df %>% separate(x, c("A", "B"))
library(dplyr)
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df %>% separate(x, c("A", "B"))
library(tidyr)
df %>% separate(x, c("A", "B"))
mtcars <- mtcars
View(mtcars)
source('~/.active-rstudio-document', echo=TRUE)
mtcars2 <- unite_(mtcars, "vs_am", c("vs","am"))
View(mtcars2)
mtcars2 <- unite_(mtcars, "vs.am", c("vs","am"))
View(mtcars2)
?read.csv
library(ggplot2)
library(ggplot2)
library(plotly)
shiny::runApp('Documents/info_201/a8-ruthviksai')
setwd("~/Documents/info_201/finalproject")
library(shiny)
library(dplyr)
library(shiny)
kickstarter <- read.csv("data/ks-projects-201801.csv")
no_backers <- kickstarter %>%
filter(backers == 0) %>%
select(name, category, main_category, backers, usd_pledged_real,
usd_goal_real, state, country) %>%
arrange(-usd_goal_real) %>%
head(10)
View(no_backers)
runApp()
max_backers <- kickstarter %>%
select(name, category, main_category, backers, usd_pledged_real,
usd_goal_real, state, country) %>%
arrange(-backers, usd_goal_real) %>%
head(10)
View(max_backers)
max_backers2 <- kickstarter %>%
select(name, category, main_category, backers, usd_pledged_real,
usd_goal_real, state, country) %>%
arrange(-backers)
View(max_backers2)
max_backers <- kickstarter %>%
select(name, category, main_category, backers, usd_pledged_real,
usd_goal_real, state, country) %>%
arrange(-backers, usd_goal_real) %>%
head(10)
max_backers3 <- kickstarter %>%
select(name, category, main_category, backers, usd_pledged_real,
usd_goal_real, state, country) %>%
arrange(usd_goal_real, -backers) %>%
head(10)
View(max_backers3)
runApp()
max_backers4 <- kickstarter %>%
select(name, category, main_category, backers, usd_pledged_real,
usd_goal_real, state, country) %>%
arrange(-usd_pledged_real) %>%
head(10)
View(max_backers4)
View(max_backers)
View(no_backers)
runApp()
runApp()
kickstarter %>%
filter(usd_pledged_real == 0) %>%
select(name, category, main_category, backers, usd_pledged_real,
usd_goal_real, state, country) %>%
arrange(-usd_goal_real) %>%
head(10) %>%
group_by(main_category)
runApp()
View(max_backers)
runApp()
high_pledged <- kickstarter %>%
select(name, category, main_category, backers, usd_pledged_real,
usd_goal_real, state, country) %>%
arrange(-usd_pledged_real, main_category) %>%
head(10)
high_pledged <- kickstarter %>%
select(name, category, main_category, backers, usd_pledged_real,
usd_goal_real, state, country) %>%
arrange(-usd_pledged_real) %>%
head(10)
View(high_pledged)
high_pledged2 <- kickstarter %>%
select(name, category, main_category, backers, usd_pledged_real,
usd_goal_real, state, country) %>%
arrange(-usd_pledged_real) %>%
arrange(main_category) %>%
head(10)
View(high_pledged2)
runApp()
runApp()
