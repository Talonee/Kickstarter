country_names <- fromJSON(
"https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/slim-3/slim-3.json"
)
country_names <- country_names %>%
rename(country_full = "name") %>%
select(country_full, `alpha-3`)
dataset <- suppressWarnings(
left_join(dataset, country_names, by = c("ISO3" = "alpha-3"))
)
dataset <- dataset %>%
mutate(country_full = ifelse(is.na(country_full), "Other", country_full)) %>%
select(name, category, main_category, state, backers,
usd_pledged_real, usd_goal_real, ISO3, country_full)
# Select relevant features
stat_by_country <- dataset %>%
group_by(country_full) %>%
summarize(backers = sum(backers),
pledged = sum(usd_pledged_real),
goal = sum(usd_goal_real),
met = pledged / goal * 100,
succ_rate = n())
View(stat_by_country)
sum(successful$succ_rate)
sum(stat_by_country$succ_rate)
View(stat_by_country)
data <- read.csv("data/ks-projects-201801.csv", stringsAsFactors = F) # remove nrows
dataset <- data %>%
filter(state == "live" | state == "successful")
# Convert ISO2 to ISO3 and combine into the dataset
iso_json <- as.data.frame(fromJSON("http://country.io/iso3.json"), stringsAsFactors = F)
iso_convert <- data.frame("ISO2" = colnames(iso_json), "ISO3" = unname(unlist(iso_json[1, ])))
dataset <- suppressWarnings(
left_join(dataset, iso_convert, by = c("country" = "ISO2"))
)
# Convert and combine ISO3 into country's full name
country_names <- fromJSON(
"https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/slim-3/slim-3.json"
)
country_names <- country_names %>%
rename(country_full = "name") %>%
select(country_full, `alpha-3`)
dataset <- suppressWarnings(
left_join(dataset, country_names, by = c("ISO3" = "alpha-3"))
)
dataset <- dataset %>%
mutate(country_full = ifelse(is.na(country_full), "Other", country_full)) %>%
select(name, category, main_category, state, backers,
usd_pledged_real, usd_goal_real, ISO3, country_full)
## ============================================================================================
# Select relevant features
stat_by_country <- dataset %>%
group_by(country_full) %>%
summarize(backers = sum(backers),
pledged = sum(usd_pledged_real),
goal = sum(usd_goal_real),
goal_met_rate = pledged / goal * 100,
num_success = n())
plot_ly(
stat_by_country,
x = ~backers,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
stat_by_country,
x = ~pledged,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
stat_by_country,
x = ~goal,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
stat_by_country,
x = ~goal_met_rate,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
stat_by_country,
x = ~num_success,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
# Select relevant features
stat_by_country <- dataset %>%
group_by(country_full) %>%
summarize(backers = sum(backers),
pledged = sum(usd_pledged_real),
goal = sum(usd_goal_real),
goal_met_rate = pledged / goal * 100,
num_success = n())
goal_met <- stat_by_country %>%
summarize(goal_met_rate = pledged / goal * 100) %>%
select(country_full, goal_met_rate)
stat_by_country %>%
summarize(goal_met_rate = pledged / goal * 100)
stat_by_country %>%
summarize(pledged / goal * 100)
goal_met <- stat_by_country$pledged / stat_by_country$goal
goal_met <- as.data.frame(stat_by_country$pledged / stat_by_country$goal)
View(goal_met)
goal_met <- as.data.frame(stat_by_country$pledged / stat_by_country$goal * 100)
# Select relevant features
stat_by_country <- dataset %>%
group_by(country_full) %>%
summarize(backers = sum(backers),
pledged = sum(usd_pledged_real),
goal = sum(usd_goal_real),
goal_met_rate = pledged / goal * 100,
num_success = n())
data <- read.csv("data/ks-projects-201801.csv", stringsAsFactors = F) # remove nrows
dataset <- data %>%
filter(state == "live" | state == "successful")
# Convert ISO2 to ISO3 and combine into the dataset
iso_json <- as.data.frame(fromJSON("http://country.io/iso3.json"), stringsAsFactors = F)
iso_convert <- data.frame("ISO2" = colnames(iso_json), "ISO3" = unname(unlist(iso_json[1, ])))
dataset <- suppressWarnings(
left_join(dataset, iso_convert, by = c("country" = "ISO2"))
)
# Convert and combine ISO3 into country's full name
country_names <- fromJSON(
"https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/slim-3/slim-3.json"
)
country_names <- country_names %>%
rename(country_full = "name") %>%
select(country_full, `alpha-3`)
dataset <- suppressWarnings(
left_join(dataset, country_names, by = c("ISO3" = "alpha-3"))
)
dataset <- dataset %>%
mutate(country_full = ifelse(is.na(country_full), "Other", country_full)) %>%
select(name, category, main_category, state, backers,
usd_pledged_real, usd_goal_real, ISO3, country_full)
## ============================================================================================
# Select relevant features
stat_by_country <- dataset %>%
group_by(country_full) %>%
summarize(backers = sum(backers),
pledged = sum(usd_pledged_real),
goal = sum(usd_goal_real),
goal_met_rate = pledged / goal * 100,
num_success = n())
stat_by_country
View(stat_by_country)
plot_ly(
stat_by_country,
x = ~goal_met_rate,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
# Select relevant features
stat_by_country <- dataset %>%
group_by(country_full) %>%
summarize(backers = sum(backers),
pledged = sum(usd_pledged_real),
goal = sum(usd_goal_real),
num_success = n())
# Select relevant features
stat_by_country <- dataset %>%
group_by(country_full) %>%
summarize(backers = sum(backers),
pledged = sum(usd_pledged_real),
goal = sum(usd_goal_real),
perc_met = pledged / goal * 100,
num_success = n())
plot_ly(
stat_by_country,
x = ~perc_met,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
# Select relevant features
stat_by_country <- dataset %>%
group_by(country_full) %>%
summarize(backers = sum(backers),
pledged = sum(usd_pledged_real),
goal = sum(usd_goal_real),
perc_met = round(pledged / goal * 100, 2),
num_success = n())
mean(per_met[2])
per_met <- dataset %>%
group_by(country_full) %>%
summarize(round(pledged / goal * 100, 2))
per_met <- dataset %>%
group_by(country_full) %>%
summarize(round(sum(usd_pledged_real) / sum(usd_goal_real) * 100, 2))
mean(per_met[2])
View(per_met)
per_met <- dataset %>%
group_by(country_full) %>%
summarize(perc = round(sum(usd_pledged_real) / sum(usd_goal_real) * 100, 2))
mean(per_met$perc)
plot_ly(
per_met)
plot_ly(
per_met, type = "scatter")
plot_ly(
per_met, x = ~perc, type = "scatter")
plot_ly(
per_met,
x = ~perc,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
mean_by_country <- dataset %>%
group_by(country_full) %>%
summarize(backers = mean(backers),
pledged = mean(usd_pledged_real),
goal = mean(usd_goal_real))
plot_ly(
mean_by_country,
x = ~backers,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
mean_by_country,
x = ~pledged,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
mean_by_country,
x = ~goal,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
stat_by_country,
x = ~num_success,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
mean_by_country,
x = ~pledged,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
mean_by_country,
x = ~backers,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
mean_by_country,
x = ~pledged,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
mean_by_country,
x = ~goal,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
plot_ly(
sum_by_country,
x = ~num_success,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
# Select relevant features
sum_by_country <- dataset %>%
group_by(country_full) %>%
summarize(backers = sum(backers),
pledged = sum(usd_pledged_real),
goal = sum(usd_goal_real),
num_success = n())
plot_ly(
sum_by_country,
x = ~num_success,
type = "bar",
color = ~country_full,
colors = 'Spectral'
)
View(sum_by_country)
per_met <- dataset %>%
group_by(country_full) %>%
summarize(perc = round(sum(usd_pledged_real) / sum(usd_goal_real) * 100, 2))
plot_ly(
per_met,
x = ~perc,
type = "bar",
color = ~country_full,
colors = 'Spectral',
text = paste0(
"Num. backers: ", stat_by_country$backers,
"\nTotal Amount Pledged (in USD):"
)
)
per_met <- dataset %>%
group_by(country_full) %>%
summarize(perc = round(sum(usd_pledged_real) / sum(usd_goal_real) * 100, 2))
plot_ly(
per_met,
x = ~perc,
type = "bar",
color = ~country_full,
colors = 'Spectral',
text = paste0(
"Total number of backers: ", sum_by_country$backers,
"\nTotal Amount Pledged (in USD): ", sum_by_country$pledged,
"\nTotal Goal Amount (in USD): ", sum_by_country$goal
)
)
ifelse(3 < 10, "nice", "bad")
ifelse(3 > 10, "nice", "bad")
plot_ly(
per_met,
x = ~perc,
type = "bar",
color = ~country_full,
colors = 'Spectral',
text = paste0(
"Percentage total funding: ", ifelse(perc > 100, "+", "-"), "$", perc,
"\nTotal number of backers: ", sum_by_country$backers,
"\nTotal amount pledged (in USD): $", sum_by_country$pledged,
"\nTotal goal amount (in USD): $", sum_by_country$goal
)
)
plot_ly(
per_met,
x = ~perc,
type = "bar",
color = ~country_full,
colors = 'Spectral',
text = paste0(
"Percentage total funding: ", ifelse(~perc > 100, "+", "-"), "$", ~perc,
"\nTotal number of backers: ", sum_by_country$backers,
"\nTotal amount pledged (in USD): $", sum_by_country$pledged,
"\nTotal goal amount (in USD): $", sum_by_country$goal
)
)
plot_ly(
per_met,
x = ~perc,
type = "bar",
color = ~country_full,
colors = 'Spectral',
text = paste0(
"Percentage total funding: ", ifelse(per_met > 100, "+", "-"), "$", ~perc,
"\nTotal number of backers: ", sum_by_country$backers,
"\nTotal amount pledged (in USD): $", sum_by_country$pledged,
"\nTotal goal amount (in USD): $", sum_by_country$goal
)
)
plot_ly(
per_met,
x = ~perc,
type = "bar",
color = ~country_full,
colors = 'Spectral',
text = paste0(
"Percentage total funding: ", ifelse(per_met$perc > 100, "+", "-"), "$", ~perc,
"\nTotal number of backers: ", sum_by_country$backers,
"\nTotal amount pledged (in USD): $", sum_by_country$pledged,
"\nTotal goal amount (in USD): $", sum_by_country$goal
)
)
plot_ly(
per_met,
x = ~perc,
type = "bar",
color = ~country_full,
colors = 'Spectral',
text = paste0(
"Percentage total funding: ", ifelse(per_met$perc > 100, "+", "-"), "$", per_met$perc,
"\nTotal number of backers: ", sum_by_country$backers,
"\nTotal amount pledged (in USD): $", sum_by_country$pledged,
"\nTotal goal amount (in USD): $", sum_by_country$goal
)
)
plot_ly(
per_met,
x = ~perc,
type = "bar",
color = ~country_full,
colors = 'Spectral',
text = paste0(
"Percentage funding to goal: $", per_met$perc,
"\nTotal number of backers: ", sum_by_country$backers,
"\nTotal amount pledged (in USD): $", sum_by_country$pledged,
"\nTotal goal amount (in USD): $", sum_by_country$goal
)
)
plot_ly(
per_met,
x = ~perc,
type = "bar",
color = ~country_full,
colors = 'Spectral',
text = paste0(
"Percentage funding to goal: ", per_met$perc, "%",
"\nTotal number of backers: ", sum_by_country$backers,
"\nTotal amount pledged (in USD): $", sum_by_country$pledged,
"\nTotal goal amount (in USD): $", sum_by_country$goal
)
)
shiny::runApp()
# REMOVE NROWS
# Read only 100 rows to save compile time
library(shiny)
runApp()
# REMOVE NROWS
# Read only 100 rows to save compile time
library(shinytheme)
install.packages(shinytheme)
# REMOVE NROWS
# Read only 100 rows to save compile time
library(shinythemes)
install.packages(shinythemes)
install.packages("shinythemes")
# REMOVE NROWS
# Read only 100 rows to save compile time
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p <- plot_ly(
sum_by_country,
x = sum_by_country[2],
type = "bar",
color = ~country_full,
colors = 'Spectral'
) %>%
layout(
title = paste0("Kickstarter Project Statistics by Countries")
)
p
runApp()
runApp()
runApp()
p <- plot_ly(
sum_by_country,
x = backers,
type = "bar",
color = ~country_full,
colors = 'Spectral'
) %>%
layout(
title = paste0("Kickstarter Project Statistics by Countries")
)
p
p <- plot_ly(
sum_by_country,
x = sum_by_country$backers,
type = "bar",
color = ~country_full,
colors = 'Spectral'
) %>%
layout(
title = paste0("Kickstarter Project Statistics by Countries")
)
p
?get
runApp()
runApp()
runApp()
runApp()
runApp()
mean_by_country$get("backers")
mean_by_country$(get("backers"))
mean_by_country$get("backers")
mean_by_country$as.character("backers")
runApp()
data <- read.csv("data/ks-projects-201801.csv", stringsAsFactors = F) # remove nrows
dataset <- data %>%
filter(state == "live" | state == "successful")
dataset <- dataset %>%
mutate(country_full = ifelse(is.na(country_full), "Other", country_full)) %>%
select(name, category, main_category, state, backers,
usd_pledged_real, usd_goal_real, ISO3, country_full)
# Select relevant features
sum_by_country <- dataset %>%
group_by(country_full) %>%
summarize(backers = sum(backers),
pledged = sum(usd_pledged_real),
goal = sum(usd_goal_real),
num_success = n())
View(dataset)
