text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
line1 <- paste("Hello, my name is ", name, ", and I'm ", age," years old.", sep = "")
line2 <- paste("In ", num_days, " days I'll be ", age + 1, sep = "")
total_text <- cat(part1, part2, sep = "\n")
total_text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13") string
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
line1 <- paste("Hello, my name is ", name, ", and I'm ", age," years old.", sep = "")
line2 <- paste("In ", num_days, " days I'll be ", age + 1, sep = "")
total_text <- cat(line1, line2, sep = "\n")
total_text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
?cat
text1 <- "boy loves "
text2 <- "a girl"
text1 <- "boy loves"
text2 <- "a girl"
paste(text1, text2)
paste(text1, text2, sep = "\n")
paste(text1, text2, sep = \n)
paste(text1, text2)
text1 <- "boy loves \n"
text2 <- "a girl"
paste(text1, text2)
?paste
paste(x, y, sep="%%", collapse=",")
paste(x, y, sep=",", collapse="%%")
x <- "boy loves \n"
y <- "a girl"
paste(x, y, sep="%%", collapse=",")
paste(x, y, sep=",", collapse="%%")
x <- "boy loves"
y <- "a girl"
paste(x, y, sep="%%", collapse=",")
paste(x, y, sep=",", collapse="%%")
paste(x, y, collapse=",")
x <- c("my", "name", "is")
y <- c("ruthvik", "Sai", "mondreti")
paste(x, y, collapse=",")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
line1 <- c("Hello, my name is ", name, ", and I'm ", age," years old.")
line2 <- paste("In ", num_days, " days I'll be ", age + 1, sep = "")
total_text <- paste(c(line1, line2), collapse = "\n")
total_text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
line1 <- paste("Hello, my name is ", name, ", and I'm ", age," years old.")
line2 <- paste("In ", num_days, " days I'll be ", age + 1, sep = "")
total_text <- paste(c(line1, line2), collapse = "\n")
total_text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
x <- paste("my", "name", "is")
y <- paste("ruthvik", "Sai", "mondreti")
paste(c(x, y), collapse=",")
paste(c(x, y), collapse="\n")
paste(c(x, y), collapse = "%%")
paste(c(x, y), collapse = "\n")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
line1 <- paste("Hello, my name is ", name, ", and I'm ", age," years old.", sep = "")
line2 <- paste("In ", num_days, " days I'll be ", age + 1, sep = "")
total_text <- paste(c(line1, line2), collapse = "\n")
total_text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
x <- c("a", "b", "c", "d")
y <- c("w", "x", "y", "z")
paste(x, y, sep="%%", collapse=",")
paste(x, y, sep=",", collapse="%%")
paste(x, y, collapse=",")
paste(x, y, sep =",")
x <- paste("a", "b", "c", "d")
y <- paste("w", "x", "y", "z")
paste(x, y, collapse=",")
paste(x, y, sep =",")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, upcoming_birthday) {
num_days <- as.Date(upcoming_birthday) - today
text <- paste("Hello, my name is ", name, ", and I'm ", age," years old."
, " In ", num_days, " days I'll be ", age + 1, sep = "")
text
}
string <- make_birthday_intro("ruthvik", 18, "2019-06-13")
string
vec <- c("INFO 201", "CSE 142")
gsub("[0-9]+", "", vec)
gsub(regex("0123456789"), "", vec)
library(stringr)
gsub(regex("0123456789"), "", vec)
gsub(regex("142"), "", vec)
gsub("142", "", vec)
gsub(regex("//d"), "", vec)
gsub(regex("\\d"), "", vec)
gsub(regex(":digit:"), "", vec)
gsub(regex("\\d"), "", vec)
gsub(regex("[0123456789]"), "", vec)
mtcars <- mtcars
View(mtcars)
View(mtcars)
arrange(mtcars, -disp, hp)
library("dplyr")
arrange(mtcars, -disp, hp)
hahaha <- arrange(mtcars, -gear, carb)
View(hahaha)
View(hahaha)
hahaha2 <- arrange(mtcars, -gear, -carb)
View(hahaha2)
View(hahaha)
View(hahaha)
hahaha3 <- arrange(mtcars, -gear)
View(hahaha3)
View(hahaha2)
select(mtcars, mean_gear = mean(gear))
summarize(mtcars, mean_gear = mean(gear))
select(mtcars, mean_gear = mean(gear))
?count
?count
?nrow
??count
?top_n
library(dplyr)
?top_n
?count
?top_n
as.Date("10/06/17")
as.Date("10/06/17", format = "%d/%m/%Y")
as.Date("10/06/17", format = "%d/%m/%y")
as.Date("10/06/17", format = "%D/%M/%y")
as.Date("10/06/17", format = "%d/%m/%y")
?as.Date
library(lubridate)
install.packages("lubridate")
library(lubridate)
?floor_date
as.Date("10/06/17", format = "%d/%m/%y")
as.Date("10/06/17", format = "%m/%d/%y")
library(ggplot2)
?ggplot
date <- as.Date("10/06/17", format = "%m/%d/%y")
?format
format(date, "%m")
format(date, "%y")
format(date, "%Y")
?separate
library(tidyr)
?separate
print("(")
source('~/.active-rstudio-document', echo=TRUE)
print("\\(")
gsub("(", "", helo)
helo <- "(kffjgg)"
gsub("(", "", helo)
gsub("\(", "", helo)
gsub("\\(", "", helo)
gsub("(", "", helo)
gsub("\\(", "", helo)
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
View(df)
library(dplyr)
df %>% separate(x, c("A", "B"))
library(dplyr)
df %>% separate(x, c("A", "B"))
library(dplyr)
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df %>% separate(x, c("A", "B"))
library(tidyr)
df %>% separate(x, c("A", "B"))
mtcars <- mtcars
View(mtcars)
source('~/.active-rstudio-document', echo=TRUE)
mtcars2 <- unite_(mtcars, "vs_am", c("vs","am"))
View(mtcars2)
mtcars2 <- unite_(mtcars, "vs.am", c("vs","am"))
View(mtcars2)
?read.csv
library(ggplot2)
library(ggplot2)
library(plotly)
shiny::runApp('Documents/info_201/a8-ruthviksai')
shiny::runApp('Documents/info_201/finalproject/scripts')
install.packages("scatterplot3d")
library("scatterplot3d")
data <- read.csv("data/ks-data.csv", stringsAsFactors = F)
data$date <- sapply(strsplit(data$launched, " "), head, 1)
cleaned <- data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
cleaned$year <- as.numeric(format(cleaned$date, "%Y"))
cleaned <- cleaned %>%
filter(year > "2011" & year <= "2017")
library(dplyr)
library(reshape2)
library(reshape)
library(lubridate)
library(plotly)
library(shiny)
library(jsonlite)
data <- read.csv("data/ks-data.csv", stringsAsFactors = F)
setwd("~/Documents/info_201/finalproject/scripts")
data <- read.csv("data/ks-data.csv", stringsAsFactors = F)
data$date <- sapply(strsplit(data$launched, " "), head, 1)
cleaned <- data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
temp <- cleaned
temp$deadline <- as.Date(temp$deadline, format = "%Y-%m-%d")
temp$time <- (temp$deadline - temp$date)
View(temp)
scatterplot3d(temp$time, temp$usd_pledged_real, temp$usd_goal_real)
scatterplot3d(temp$time, temp$usd_goal_real, temp$usd_pledged_real)
install.packages("rgl")
library(rgl)
library("rgl")
install.packages("rgl")
library(rgl)
library(RColorBrewer)
plot3d()
plot3d(temp$time, temp$backers, temp$usd_pledged_real)
runApp()
cleaned$year <- as.numeric(format(cleaned$date, "%Y"))
latest_data <- cleaned %>% filter(year != 1970)
View(latest_data)
data <- read.csv("data/ks-data.csv", stringsAsFactors = F)
data$date <- sapply(strsplit(data$launched, " "), head, 1)
cleaned <- data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
time_data <- cleaned
time_data$deadline <- as.Date(time_data$deadline, format = "%Y-%m-%d")
time_data$time <- (time_data$deadline - time_data$date)
cleaned$year <- as.numeric(format(cleaned$date, "%Y"))
cleaned <- cleaned %>%
filter(year > "2011" & year <= "2017")
View(time_data)
runApp()
setwd("~/Documents/info_201/finalproject/scripts")
data <- read.csv("data/ks-data.csv", stringsAsFactors = F)
data$date <- sapply(strsplit(data$launched, " "), head, 1)
data <- data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
time_data <- data
time_data$deadline <- as.Date(time_data$deadline, format = "%Y-%m-%d")
time_data$time <- (time_data$deadline - time_data$date)
cleaned$year <- as.numeric(format(data$date, "%Y"))
latest_data <- data %>% filter(year != 1970)
cleaned <- cleaned %>%
filter(year > "2011" & year <= "2017")
library(dplyr)
library(reshape2)
library(reshape)
library(lubridate)
library(plotly)
library(shiny)
library(jsonlite)
runApp()
data <- read.csv("data/ks-data.csv", stringsAsFactors = F)
data$date <- sapply(strsplit(data$launched, " "), head, 1)
data <- data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
time_data <- data
time_data$deadline <- as.Date(time_data$deadline, format = "%Y-%m-%d")
time_data$time <- (time_data$deadline - time_data$date)
cleaned$year <- as.numeric(format(data$date, "%Y"))
cleaned <- data
cleaned$year <- as.numeric(format(data$date, "%Y"))
latest_data <- data %>% filter(year != 1970)
cleaned <- cleaned %>%
filter(year > "2011" & year <= "2017")
View(cleaned)
latest_data <- cleaned %>% filter(year != 1970)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
latest_data %>%
filter(main_category == "Publishing") %>%
select(category) %>% unique()
latest_data %>% filter(main_category == "Publishing") %>% select(category)
categoryhaha <- latest_data %>% filter(main_category == "Publishing") %>% select(category)
unique(categoryhaha)
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.csv("data/ks-data.csv", stringsAsFactors = F)
data$date <- sapply(strsplit(data$launched, " "), head, 1)
cleaned <- data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
cleaned$year <- as.numeric(format(data$date, "%Y"))
cleaned <- cleaned %>%
filter(year > "2011" & year <= "2017")
data <- read.csv("data/ks-data.csv", stringsAsFactors = F)
data$date <- sapply(strsplit(data$launched, " "), head, 1)
cleaned <- data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
cleaned$year <- as.numeric(format(data$date, "%Y"))
runApp()
runApp()
data <- read.csv("data/ks-data.csv", stringsAsFactors = F)
data <- read.csv("data/ks-data.csv", stringsAsFactors = F)
data$date <- sapply(strsplit(data$launched, " "), head, 1)
cleaned <- data %>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
time_data <- cleaned
cleaned$year <- as.numeric(format(cleaned$date, "%Y"))
cleaned <- cleaned %>%
filter(year > "2011" & year <= "2017")
time_data$deadline <- as.Date(time_data$deadline, format = "%Y-%m-%d")
time_data$time <- (time_data$deadline - time_data$date)
plot_ly(x = time_data$time,
y = time_data$backers,
z = time_data$usd_pledged_real) %>%
add_surface() %>%
layout(
title = "Pledged Amount",
scene = list(
xaxis = "Time taken for the project",
yaxis = "Number of backers",
zaxis = "Pledged Amount (USD)"
)
)
library(dplyr)
library(reshape2)
library(reshape)
library(lubridate)
library(plotly)
library(shiny)
library(jsonlite)
class(time_data)
plot_ly(x = time_data$time,
y = time_data$backers,
z = time_data$usd_pledged_real)
plot_ly(x = time_data$time,
y = time_data$backers,
z = time_data$usd_pledged_real) %>%
add_surface()
plot_ly(x = ~time_data$time,
y = ~time_data$backers,
z = ~time_data$usd_pledged_real) %>%
add_surface()
plot_ly(x = ~time_data$time,
y = ~time_data$usd_pledged_real,
z = ~time_data$backers) %>%
add_surface()
packageVersion('plotly')
plot_ly(x = ~time_data$time,
y = ~time_data$backers,
z = ~time_data$usd_pledged_real) %>%
add_markers() %>%
layout(
title = "Pledged Amount",
scene = list(
xaxis = list("Time taken for the project"),
yaxis = list("Number of backers"),
zaxis =list("Pledged Amount (USD)")
)
)
runApp()
plot_ly(x = ~time_data$time,
y = ~time_data$backers,
z = ~time_data$usd_pledged_real) %>%
add_markers() %>%
layout(
title = "Pledged Amount",
scene = list(
xaxis = list(title = "Time taken for the project"),
yaxis = list(title = "Number of backers"),
zaxis =list(title = "Pledged Amount (USD)")
)
)
runApp()
runApp()
plot_ly(x = ~categorised$time,
y = ~categorised$backers,
z = ~categorised$usd_pledged_real) %>%
add_markers() %>%
layout(
title = "Pledged Amount",
scene = list(
xaxis = list(title = "Time taken for the project"),
yaxis = list(title = "Number of backers"),
zaxis =list(title = "Pledged Amount (USD)"),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Miles/(US) gallon',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
)
)
)
categorised <- time_data %>%
filter(main_category == input$main_cat2)
categorised <- time_data %>%
filter(main_category == "Publishing")
plot_ly(x = ~categorised$time,
y = ~categorised$backers,
z = ~categorised$usd_pledged_real) %>%
add_markers() %>%
layout(
title = "Pledged Amount",
scene = list(
xaxis = list(title = "Time taken for the project"),
yaxis = list(title = "Number of backers"),
zaxis =list(title = "Pledged Amount (USD)"),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Miles/(US) gallon',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
)
)
)
runApp()
categorised <- time_data %>%
filter(main_category == "Publishing")
plot_ly(z = ~categorised$time,
y = ~categorised$backers,
x = ~categorised$usd_pledged_real) %>%
add_markers() %>%
layout(
title = "Pledged Amount",
scene = list(
zaxis = list(title = "Time taken for the project"),
yaxis = list(title = "Number of backers"),
xaxis =list(title = "Pledged Amount (USD)"),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Miles/(US) gallon',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
)
)
)
plot_ly(x = categorised$time,
y = categorised$usd_pledged_real)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
time_data$deadline <- as.Date(time_data$deadline, format = "%Y-%m-%d")
time_data$time <- ( (time_data$deadline - time_data$date) * 24 * 60 )
View(time_data)
View(time_data)
runApp()
shiny::runApp()
